# EXERCITIUL 1:
# 1. Declară o listă note_muzicale în care să pui do re mi etc până la do.
# Afișeaz-o.
# Inversează ordinea folosind slicing și suprascrie această listă.
# Printează varianta actuală (inversată).
# Pe această listă aplică o metodă care bănuiești că face același lucru, adică să îi inverseze ordinea. Nu trebuie să o suprascrii în acest caz, deoarece metoda face asta automat.
# Printează varianta actuală a listei. Practic ai ajuns înapoi la varianta inițială.

note_muzicale = ['do', 're', 'mi', 'fa', 'sol', 'la', 'si', 'do']
print(note_muzicale)
note_muzicale = note_muzicale[::-1]  
print(note_muzicale)
note_muzicale.reverse()
print(note_muzicale)

# EXERCITIUL 2:
# De câte ori apare ‘do’?

print(note_muzicale.count('do'))

# EXERCITIUL 3:
# Având 2 liste, [3, 1, 0, 2] și [6, 5, 4]. Găsește 2 variante să le unești într-o singură listă. 

list1 = [3, 1, 0, 2]
list2 = [6, 5, 4]
# first method
print(list1 + list2)  
# second method
list1.extend(list2)
print(list1)

# EXERCITIUL 4:
# Sortează și afișază lista generată la exercițiul anterior.
# Stergeti numărul 0 folosind o funcție.
# Afișaza iar lista.

list1 = [3, 1, 0, 2]
list2 = [6, 5, 4]
list1.extend(list2)
print(list1)
list1.sort()
print(list1)
list1.remove(0)
print(list1)

# EXERCITIUL 5:
# Folosind un if verifică lista generată la exercițiul 3 și afișază:
#  ⦁ Lista este goală.
#  ⦁ Lista nu este goală.

list1 = [3, 1, 0, 2]
list2 = [6, 5, 4]
list1.extend(list2)
print(list1)
list1.sort()
print(list1)
list1.remove(0)
print(list1)
list1.clear()
print(list1)

if len(list1) == 0: # al 2-lea caz in care testam listele goale
    print('Lista este goala.')
else:
    print('Lista nu este goala.') # primul caz in care testam ca lista nu este goala

# EXERCITIUL 6:
# Folosește o funcție care să șteargă lista de la exercițiul 3.

list1.clear()
print(list1)

# EXERCITIUL 7:
# Copy paste la exercițiul 5. Verifică încă o dată. Acum ar trebui să se afișeze că lista e goală.

list1 = [3, 1, 0, 2]
list2 = [6, 5, 4]
list1.extend(list2)
print(list1)
list1.sort()
print(list1)
list1.remove(0)
print(list1)
list1.clear()
print(list1)

if len(list1) == 0: # al 2-lea caz in care testam listele goale
    print('Lista este goala.')
else:
    print('Lista nu este goala.') # primul caz in care testam ca lista nu este goala

# EXERCITIUL 8:
# Având dicționarul dict1 = {'Ana' : 8, 'Gigel' : 10, 'Dorel' : 5}
# Folosește o funcție că să afișezi Elevii (cheile)

print(dict1.keys())

# EXERCITIUL 9:
# Printează cei 3 elevi și notele lor
# Ex: ‘Ana a luat nota {x}’
# Doar nota o vei lua folosindu-te de cheie.

dict1 = {'Ana': 8, 'Gigel': 10, 'Dorel': 5}
print(f"Ana a luat nota {dict1['Ana']}.")
print(f"Gigel a luat nota {dict1['Gigel']}.")
print(f"Dorel a luat nota {dict1['Dorel']}.")

# EXERCITIUL 10:
# Dorel a făcut contestație și a primit 6. Modifică nota lui Dorel în 6. Printează nota după modificare.

dict1 = {'Ana': 8, 'Gigel': 10, 'Dorel': 5}
dict1["Dorel"] = 6
print(f"Dorel are acum nota {dict1['Dorel']}.")

# EXERCITIUL 11:
# Gigel se transferă din clasă
# Căuta o funcție care să îl șteargă
# Vine un coleg nou. Adaugă Ionică, cu nota 9
# Printează noii elevi.

dict1 = {'Ana': 8, 'Gigel': 10, 'Dorel': 5}
dict1.pop('Gigel')
dict1['Ionica']= 9
print(dict1)

# EXERCITIUL 12:
# Set
zile_sapt = {'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbăta', 'duminică'}
weekend = {'sâmbăta', 'duminică'}
Adaugă în zilele_sapt ‘luni’
Afișează zile_sapt

zile_sapt = {'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbăta', 'duminică'}
weekend = {'sâmbăta', 'duminică'}
zile_sapt.add('luni')
print(zile_sapt)

# EXERCITIUL 13:
# Folosește un if și verifică dacă:
# Weekend este un subset al zilelor din săptămânii.
# Weekend nu este un subset al zilelor din săptămânii.

if weekend <= zile_sapt:
    print("Weekend este un subset al zilelor din săptămânii.")
else:
    print("Weekend nu este un subset al zilelor din săptămânii.")
# or
if weekend.issubset(zile_sapt):
    print("Weekend este un subset al zilelor din săptămânii.")
else:
    print("Weekend nu este un subset al zilelor din săptămânii.")

# EXERCITIUL 14:
# Afișează diferențele dintre aceste 2 seturi.

zile_sapt = {'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbăta', 'duminică'}
weekend = {'sâmbăta', 'duminică'}

print(zile_sapt.difference(weekend))

# EXERCITIUL 15:
# Afișază intersecția elementelor din aceste 2 seturi.

zile_sapt = {'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbăta', 'duminică'}
weekend = {'sâmbăta', 'duminică'}

print(zile_sapt.intersection(weekend))



# EXERCITIU OPTIONAL:
# Ne imaginăm o echipă de fotbal pt teren sintetic.
# 3 Schimbări maxime admise:

# Declară o Listă cu 5 jucători
# Schimbari_efectuate = te joci tu cu valori diferite
# Schimbari_max = 3

# Dacă Jucătorul x e în teren și mai avem schimbări la dispoziție
# Efectuează schimbarea 
# Șterge jucătorul scos din listă
# Adaugă jucătorul intrat
# Afișază a intrat x, a ieșit y, mai ai z schimbări

# Dacă jucătorul nu e în teren:
# Afișază ‘nu se poate efectua schimbarea deoarece jucătorul x nu e în teren’
# Afișază ‘mai ai z schimbări’

# Testează codul cu diferite valori

players = ["Messi", "Ronaldo", "Mbappe", "Neymar", "Zidane"]
reserve_players = ["Kane", "Bruyne", "Maradona", "Alves"]
max_changes = 3
numbers_of_refuse_to_change = 5
print(f"The match has begun. Let's wish success to our team of: {', '.join(players)}.")
print(f"On the bench we have the following players: {', '.join(reserve_players)}.")
while max_changes > 0 and numbers_of_refuse_to_change > 0:
    make_a_change = input("Do you want to make a change?? (y/n)\n")
    make_a_change = make_a_change.lower()
    if make_a_change == "y":
        player_changed = input("Who do you want to change? (name of player)\n").lower().capitalize()
        player_from_reserve = input("Who do you want to change with?? (name of player)\n").lower().capitalize()
        if player_changed in players and player_from_reserve in reserve_players:
                players.remove(player_changed)
                players.append(player_from_reserve)
                reserve_players.remove(player_from_reserve)
                max_changes -= 1
                if max_changes >= 1:
                    print(f"{player_from_reserve} entered the field and {player_changed} came out."
                          f" You still have {max_changes} changes.")
                    print(f"The team is made up of {', '.join(players)} and on the bench are "
                          f"the players {', '.join(reserve_players)}")
                    print("The players continue the match, it's a tight match.")
        elif player_changed not in players:
            print(f"Player {player_changed} is not on the field.")
            print(f"The team is made up of {', '.join(players)} and on the bench are "
                      f"the players {', '.join(reserve_players)}")
        else:
            print(f"Player {player_from_reserve} is not on the bench.")
            print(f"The team is made up of {', '.join(players)} and on the bench are "
                      f"the players {', '.join(reserve_players)}")
    else:
        print(f"The players continue to play, the team being made up of {', '.join(players)}.")
        numbers_of_refuse_to_change -= 1
print(f"You have reached the maximum number of changes, the players will "
          f"continue the match in the formation {', '.join(players)}.")
your_team_goals = random.randint(0, 8)
opposing_team_goals = random.randint(0, 8)
sleep(4)
if your_team_goals == opposing_team_goals:
    print(f"The match ended in a draw with the score {your_team_goals}:{opposing_team_goals}.")
elif your_team_goals > opposing_team_goals:
    print(f"Congratulations! Your team won the match with the score {your_team_goals}:{opposing_team_goals}.")
else:
    print("\n")
    print(f"Your team lost by score {your_team_goals}:{opposing_team_goals}."
        f"\nI'm sure next time you'll win!")


















